chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'extractTranscript' || request.action === 'extractTranscriptWithTitle') {
    try {
      const transcriptPanel = document.querySelector('ytd-transcript-renderer');
      if (!transcriptPanel) {
        sendResponse({ transcript: null, videoTitle: null });
        return;
      }
      const transcriptElements = document.querySelectorAll('ytd-transcript-segment-renderer .segment-text');
      if (transcriptElements.length === 0) {
        sendResponse({ transcript: null, videoTitle: null });
        return;
      }
      const urlParams = new URLSearchParams(window.location.search);
      const videoId = urlParams.get('v') || 'unknown';
      
      const transcriptLines = Array.from(transcriptElements)
        .map((el, index) => {
          const timestampEl = el.closest('ytd-transcript-segment-renderer').querySelector('.segment-timestamp');
          const timeText = timestampEl ? timestampEl.textContent.trim() : `00:00:${index.toString().padStart(2, '0')}`;
          return `[${timeText}] ${el.textContent.trim()}`;
        });
      
      const header = `Transcript of a YouTube Video (ID: ${videoId})
Generated by the "YouTube Transcript and Screenshot Extractor" Chrome Extension

This transcript contains the spoken content of a YouTube video, with timestamps in [MM:SS] format (e.g., [0:10]) indicating the time each segment begins. Screenshots for multiple timestamps, optionally including Â±5s offsets in manual mode, are bundled into a single PDF file named "transcript_with_screenshots.pdf" when using "Download All", or "screenshots.pdf" in manual mode. The user can specify multiple timestamps in one entry (e.g., "0:10, 6:09, 17:26"), or use the "Download All" button to automatically sample timestamps from the transcript, ensuring the PDF size stays under 32 MB. The "Download All" feature samples timestamps without offsets, intermingling transcript lines and screenshots in chronological order, while manual mode allows offsets if enabled. Each screenshot in the PDF is labeled with its timestamp (e.g., "Screenshot at 0:10"). You can request a screenshot at a specific timestamp by saying, for example, "Please provide the screenshot at [0:10]," or request multiple screenshots by referring to the timestamps (e.g., "Please provide the screenshots at [0:10], [6:09], and [17:26]"). The user will upload the PDF containing the transcript and screenshots, and you can refer to the labeled screenshot in the PDF for further analysis.

Transcript Content:
`;
      
      const transcript = header + transcriptLines.join('\n');

      const titleElement = document.querySelector('ytd-video-primary-info-renderer h1');
      const videoTitle = titleElement ? titleElement.textContent.trim() : 'Unknown Video Title';

      sendResponse({ transcript, videoTitle });
    } catch (e) {
      sendResponse({ transcript: null, videoTitle: null });
    }
  } else if (request.action === 'captureScreenshot') {
    try {
      const video = document.querySelector('video');
      if (!video || video.paused || video.currentTime === 0) {
        sendResponse({ screenshot: null });
        return;
      }
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      const dataUrl = canvas.toDataURL('image/png');
      sendResponse({ screenshot: dataUrl });
    } catch (e) {
      sendResponse({ screenshot: null });
    }
  } else if (request.action === 'captureAtTime') {
    try {
      const video = document.querySelector('video');
      if (!video) {
        sendResponse({ screenshot: null });
        return;
      }
      video.currentTime = request.time;
      const onSeeked = () => {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0);
        const dataUrl = canvas.toDataURL('image/png');
        sendResponse({ screenshot: dataUrl });
        video.removeEventListener('seeked', onSeeked);
      };
      video.addEventListener('seeked', onSeeked);
      return true;
    } catch (e) {
      sendResponse({ screenshot: null });
    }
  } else if (request.action === 'getVideoInfo') {
    try {
      const video = document.querySelector('video');
      if (!video) {
        sendResponse({ duration: null });
        return;
      }
      sendResponse({ duration: video.duration });
    } catch (e) {
      sendResponse({ duration: null });
    }
  }
});
